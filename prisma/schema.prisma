// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  password String

  likes Like[]
  comments Comment[]
  author Author?
  following Follow[]
}

model Author {
  id String @id @default(uuid())
  name String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @unique

  posts Post[]
  followers Follow[]
}

model Follow {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  author Author @relation(fields: [authorId], references: [id])
  authorId String

  @@id([userId, authorId])
}

model Tag {
  id Int @id @default(autoincrement())
  title String @unique

  posts Post[]
}

model Post {
  id String @id @default(uuid())
  title String
  content String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime?

  tags Tag[]

  author Author @relation(fields: [authorId], references: [id])
  authorId String

  likes Like[]
  comments Comment[]
}

model Like {
  post Post @relation(fields: [postId], references: [id])
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@id([userId, postId])
}

model Comment {
  id Int @id @default(autoincrement())
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime?

  post Post @relation(fields: [postId], references: [id])
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}
